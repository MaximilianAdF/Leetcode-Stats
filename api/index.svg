
<svg width="410" height="186" viewBox="0 0 410 186" fill="none" xmlns="http://www.w3.org/2000/svg" role="img">
  <title id="titleId">User's Solved Problems, Rank: UserRank</title>
  <desc id="descId"/>
  
  <style>
      .header {
          font: 600 100% 'Segoe UI', Ubuntu, Sans-Serif;
          fill: #ffff;
          animation: fadeInAnimation 0.8s ease-in-out forwards; 
      }

      .stat {
          font: 600 14px 'Segoe UI', Ubuntu, "Helvetica Neue", Sans-Serif;
          fill: #434d58;
      }

      .stagger {
          opacity: 0;
          animation: fadeInAnimation 0.3s ease-in-out forwards;
      }

      .total-solved {
          font: 600 24px 'Segoe UI', Ubuntu, Sans-Serif;
          fill: #ffff;
          animation: scaleInAnimation 0.3s ease-in-out forwards;
      }

      .rank-percentile-header {
          font-size: 14px;
      }

      .rank-percentile-text {
          font-size: 16px;
      }

      .not_bold {
          font-weight: 400;
      }

      .bold {
          font-weight: 700;
      }

      .solved-circle-rim {
        z-index: 1;
        fill: transparent;
        stroke: #ffff;
        stroke-width: 3;
        stroke-linecap: round;
        opacity: 0.2;
      }

      .solved-circle {
        stroke: #FB8C00;
        stroke-dasharray: 374;
        stroke-dashoffset: 0;
        fill: none;
        stroke-width: 3;
        stroke-linecap: round;
        opacity: 0.8;
        transform-origin: 90px 55px;
        transform: rotate(-90deg);
      }
      
        @keyframes fadeInAnimation {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }
  </style>
  
  <rect data-testid="card-bg" x="0.5" y="0.5" rx="4.5" height="99%" stroke="#E4E2E2" width="409" fill="#151515" stroke-opacity="1"/>
  <g data-testid="card-title" transform="translate(25, 35)">
      <g transform="translate(0, 0)">
          <text class="header" x="0" y="0" data-testid="header">Maximilian Alvim de Faria's LeetCode Stats</text>
      </g>
  </g>
  <g data-testid="main-card-body" transform="translate(0,55)">
        <circle class="solved-circle" cx="90" cy="55" r="60"/>
        <circle class="solved-circle-rim" cx="90" cy="55" r="60"/>
        <text x="90" y="55" id="total-solved" class="total-solved not_bold" text-anchor="middle" alignment-baseline="middle">331</text>
        <text x="90" y="80" class="stat not_bold" text-anchor="middle" alignment-baseline="middle">Solved</text>
  </g>
    <script type="module">
        document.addEventListener("DOMContentLoaded", function() {
            // Function to set the length of the solved circle stroke based on percentage with animation
            function setCircleLength(percentage) {
                var circle = document.querySelector(".solved-circle");
                var circumference = Math.PI * 2 * circle.getAttribute("r");
                var offset = circumference * (1 - percentage / 100);
                circle.style.strokeDasharray = circumference; // Set strokeDasharray to circumference
                circle.style.strokeDashoffset = circumference; // Set initial strokeDashoffset to circumference
                setTimeout(() => {
                    circle.style.transition = "stroke-dashoffset 1s ease-in-out"; // Add transition
                    circle.style.strokeDashoffset = offset; // Set strokeDashoffset to desired value
                }, 50); // Adjust the delay as needed
            }

            // Example usage:
            var solvedPercentage = 0; // Change this to the desired percentage
            setCircleLength(solvedPercentage);

            function checkTextOverflow() {
                var container = document.querySelector(".header");
                var containerWidth = container.getBoundingClientRect().width;

                console.log(containerWidth);
                if (containerWidth > 350) {
                    var fontSize = Math.floor(100 * (350/containerWidth)); // Adjust 10 according to your preference
                    container.style.fontSize = fontSize + "%";
                }
            }
            checkTextOverflow();

            function toggleTextPercentage(solvedPercentage, solvedCount) {
                const element = document.getElementById("total-solved");
                element.textContent = element.textContent === solvedCount ? solvedPercentage + "%" : solvedCount;
            }

            const intervalId = setInterval(() => {
                toggleTextPercentage(${solvedPercentage}, ${solvedCount});
            }, 5000);
        });
    </script>
</svg>